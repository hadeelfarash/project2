import cv2
import numpy as np
import RPi.GPIO as GPIO

# GPIO Pins for controlling the car
left_motor_pin = 17  # Adjust to your motor configuration
right_motor_pin = 18  # Adjust to your motor configuration

# Set up GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(left_motor_pin, GPIO.OUT)
GPIO.setup(right_motor_pin, GPIO.OUT)

# Create a function to control the car's movement
def move_forward():
    GPIO.output(left_motor_pin, GPIO.HIGH)
    GPIO.output(right_motor_pin, GPIO.HIGH)

def stop():
    GPIO.output(left_motor_pin, GPIO.LOW)
    GPIO.output(right_motor_pin, GPIO.LOW)

# Create a VideoCapture object for the Pi Camera
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()

    if not ret:
        break

    # Convert the frame to HSV color space
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define the range of green color in HSV
    lower_green = np.array([40, 40, 40])
    upper_green = np.array([80, 255, 255])

    # Define the range of red color in HSV
    lower_red = np.array([0, 100, 100])
    upper_red = np.array([10, 255, 255])

    # Threshold the frame to get only green and red colors
    green_mask = cv2.inRange(hsv_frame, lower_green, upper_green)
    red_mask = cv2.inRange(hsv_frame, lower_red, upper_red)

    # Find contours in the masks
    green_contours, _ = cv2.findContours(green_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    red_contours, _ = cv2.findContours(red_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Check if there are green and red objects
    if len(green_contours) > 0:
        move_forward()
    elif len(red_contours) > 0:
        # Stop the car when a red object is detected
        stop()
    else:
        # Continue moving forward if neither green nor red is detected
        move_forward()

    # Display the frame
    cv2.imshow("Car Camera", frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the VideoCapture and GPIO
cap.release()
cv2.destroyAllWindows()
GPIO.cleanup()
